{
  "name": "express-spa-router",
  "version": "0.0.6",
  "description": "Express middleware for single page app routing",
  "main": "index.js",
  "author": {
    "name": "Dan Motzenbecker",
    "email": "dan@oxism.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dmotz/express-spa-router"
  },
  "keywords": [
    "express",
    "router",
    "spa"
  ],
  "license": "MIT",
  "peerDependencies": {
    "express": "~3.x.x"
  },
  "readme": "# Express Single Page App Router Middleware\n#### Internally reroute non-AJAX requests to your client-side app router.\n[Dan Motzenbecker](http://oxism.com), MIT License\n\n[@dcmotz](http://twitter.com/dcmotz)\n\n\n### Concept\nLet's say you have a modern single page web application with client-side\nURL routing (e.g. Backbone).\n\nSince views are rendered on the client, you'll likely use RESTful Express routes\nthat handle a single concern and return only JSON back to the client. The app's\nonly non-JSON endpoint is likely the index route (`/`).\n\nSo while `/users` might return a JSON array when hit via the client app's AJAX\ncall, you'll want to handle that request differently if the user clicks a link from\nan external site or manually types it in the address bar. When hit in this context,\nthis middleware internally redirects the request to the index route handler, so the\nsame client-side app is loaded for every valid route. The URL for the end user\nremains the same and the client-side app uses its own router to show the user what's\nbeen requested based on the route. This eliminates the tedium of performing this kind\nof conditional logic within individual route callbacks.\n\n### Installation\n```\n$ npm install --save express-spa-router\n```\n\n### Usage\nIn your Express app's configuration, place this middleware high up the stack\n(before `router` and `static`) and pass it your app instance:\n\n```javascript\napp.use(require('express-spa-router')(app));\n```\n\nAJAX requests will be untouched, but valid routes called without AJAX will result\nin the the index route's result being returned. Non-matching routes will be\npassed down the stack by default and will be end up being handled by whatever your\napp does with 404s. This can be overridden by passing a `noRoute` function in the\noptions object:\n\n```javascript\napp.use(require('express-spa-router')(app,\n  {\n    noRoute: function(req, res, next) {\n      //handle unmatched route\n    }\n  }\n));\n```\n\nExpress's default static paths are passed along correctly by default (as are\n`/js` and `/css`), but if you use different paths or have additional static files\nin your `public` directory, make sure to specify them in the options either via\na regular expression or an array of directory names:\n\n```javascript\napp.use require('express-spa-router')(app, {staticPaths: ['js', 'css', 'uploads']});\n```\n\nYou may also have valid client-side routes that don't exist on the server-side.\nRather than having them reach the 404 handler, you can specify them in the \nconfiguration options using `extraRoutes` and passing either a regular expression \nor an array:\n\n```javascript\napp.use require('express-spa-router')(app, {extraRoutes: ['about', 'themes']});\n```\n\nFinally, if you want to route non-AJAX `GET` requests to certain routes normally,\npass paths in the `ignore` option:\n\n```javascript\napp.use require('express-spa-router')(app, {ignore: ['api']});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dmotz/express-spa-router/issues"
  },
  "homepage": "https://github.com/dmotz/express-spa-router",
  "_id": "express-spa-router@0.0.6",
  "_shasum": "3813bd3870156bd85182cedb63a55c1384359e1a",
  "_from": "express-spa-router@0.0.6",
  "_resolved": "https://registry.npmjs.org/express-spa-router/-/express-spa-router-0.0.6.tgz"
}
